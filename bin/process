#!/usr/bin/env python

import argparse
from datetime import timedelta
from dateutil import parser
import logging
import sys

from sportblurbs.filter import (
    filter_mlb_at_least_one_ab_or_ip,
    filter_nba_at_least_one_minute_played,
    filter_nfl_at_least_one_att,
    filter_player_has_position,
    filter_player_has_team,
)
from sportblurbs.league import nfl, mlb, nba
from sportblurbs.process import process_games

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logger = logging.getLogger()

LEAGUE_MAP = {league.name: league for league in [nfl, mlb, nba]}


def parse_args():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("-l", "--league", action="store", required=True)
    arg_parser.add_argument("-s", "--start-date", action="store", required=True)
    arg_parser.add_argument("-e", "--end-date", action="store")
    args = arg_parser.parse_args()

    league = None
    try:
        league = LEAGUE_MAP[args.league.upper()]
    except KeyError:
        logger.error("Unknown league '{}'.".format(args.league))
        exit(1)

    start_date = parser.parse(args.start_date)
    end_date = parser.parse(args.end_date) if args.end_date else start_date
    if start_date > end_date:
        logger.error(f"Start date '{args.start_date}' is after end date '{args.end_date}'.")
        exit(1)

    if league == nfl:
        dates = nfl.get_weeks(start_date, end_date)
        if not dates:
            logger.error(f"No NFL weeks between '{args.start_date}' and '{args.end_date}'.")
            exit(1)
    else:
        dates = [start_date + timedelta(t) for t in range((end_date - start_date).days + 1)]

    return {"dates": dates, "league": league}


if __name__ == "__main__":
    kwargs = parse_args()

    filters = [filter_player_has_position, filter_player_has_team]
    if kwargs["league"] == nfl:
        filters.append(filter_nfl_at_least_one_att)
    elif kwargs["league"] == nba:
        filters.append(filter_nba_at_least_one_minute_played)
    elif kwargs["league"] == mlb:
        filters.append(filter_mlb_at_least_one_ab_or_ip)

    process_games(**kwargs, filters=filters)
